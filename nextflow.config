#! /usr/bin/env nextflow

// C-WAP NextFlow configuration script


// Clear the work directory after successfull execution
// cleanup = true


manifest {
    homePage = 'https://github.com/CFSAN-Biostatistics/C-WAP'
    description = 'C-WAP: CFSAN Wastewater Analysis Pipeline'
    author = 'Tunc Kayikcioglu / FDA / CFSAN, maintained by Jasmine Amirzadegan / FDA / CFSAN'
    mainScript = 'startWorkflow.nf'
}


params {
    referenceSequence = "$projectDir/covidRefSequences/wuhan.fa"
    variantDBfile = "$projectDir/covidRefSequences/varDefinitions.pkl"
    primerBedFile = "$projectDir/covidRefSequences/ARTICv5_3_2.bed"
    in = "./"
    out = "./"
    make_pdfs = true
}


conda {
    cacheDir = "$projectDir/conda"
    createOptions = '-c bioconda -c conda-forge -c defaults'
    conda.createTimeout = '3 h'

    withName:'freyjaVariantCaller'{
        useMamba = true
    }
}

process {
    shell = ['/bin/bash','-e']
    //clusterOptions = '-x n141,n147,n225,n227,n228'
    
    //errorStrategy = 'retry'
    errorStrategy = {sleep(2000); return 'retry'} // Wait for 2000ms before re-trying. Waiting gives automount a reaction time.
    maxRetries = 5

//	Disabled, as it increases computation time.
//	scratch = "ram-disk"
//	scratch = true
}

process {
    time = '1 h'
    cpus = 2
    memory = '8 GB'

    withLabel: high_cpu {
        maxForks = 2
        cpus = 15
        memory = '16 GB'
    }

    
    /////////////////////////////////////////////REMOVE
    //withName: 'freyjaVariantCaller' {
    //    time = '3 h'
    //    maxForks = 20
    //    cpus = 15
    //    // cpus = 20 
    //    memory = '24 GB'
    //}
    
    withName: 'consensusSequence' {
    maxForks = 1
    cpus = 15
    memory = '16 GB'
    }

    withLabel: high_IO {
        // Execute only a few at a time.
        // This reduces storage IO by avoiding concurrent read access.
        maxForks = 2
        }
        withName: 'trimming' {
            memory = '16 GB'
        }
        withName: 'trimmedBam2Fastq' {
            memory = '16 GB'
        }
        withName: 'generatePileup' {
            memory = '16 GB'
        }
    }	


// This block needs to be modified to customise for the available computational resources
profiles {
    local_only {
        process.executor = 'local'
    }

    standard {
        executor {
            name = 'local'
            queueSize = 400
            // queueStatInterval = '30 sec'
        }

        process {
            executor = 'local'
            // queue = <partition name here>
            time = '1 h'
            cpus = 2
            memory = '8 GB'
            
            withLabel: high_cpu {
                cpus = 20
            }
        }
    }
    
    aws {
        executor {
            name = 'slurm'
            queueSize = 400
        }
            
        process {
            time = '1 h'
            cpus = 2
            memory = '8 GB'
            
            withLabel: high_cpu {
                cpus = 15
            }
            
            withLabel: high_IO {
                // Execute only a few at a time.
                // This reduces storage IO by avoiding concurrent read access.
                maxForks = 2
            }
        }
    }
    
}

